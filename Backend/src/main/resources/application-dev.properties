spring.application.name=BobGourmet

#Database (??? H2)
spring.datasource.url=jdbc:h2:mem:BobGourmet:DB_CLOSE_DELAY=-1;
spring.datasource.driverClassName= org.h2.Driver
spring.datasource.username=
spring.datasource.password=
spring.jpa.database-platform= org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update

springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operations-sorter=alpha
springdoc.swagger-ui.tags-sorter=alpha
springdoc.default-consumes-media-type=application/json
springdoc.default-produces-media-type=application/json

springdoc.api-docs.info.title=BobGourmet API
springdoc.api-docs.info.version=v1.0.0

spring.data.redis.host=localhost
spring.data.redis.port=6379

# JWT
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION:900000}
# jwt.refresh-expiration= 604800000 # 7 days

cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:5173,http://localhost:3000}

#Redis
spring.data.redis.password=${REDIS_PASSWORD:}

# OAuth Frontend Configuration
oauth.frontend.base-url= http://localhost:5173

#WebSocket(STOMP)
spring.websocket.stomp.endpoint=/ws 
spring.websocket.stomp.allowed-origins =  ${cors.allowed-origins}

# Email Configuration handled by EmailConfig.java @Profile("dev")
# App-specific email settings
app.mail.from=${EMAIL_FROM:noreply@bobgourmet.com}
app.frontend.url=${FRONTEND_URL:http://localhost:5173}

# Development logging - use INFO in production
logging.level.org.springframework.web=${LOGGING_LEVEL:DEBUG}
logging.level.org.springframework.security=${LOGGING_LEVEL:DEBUG}
logging.level.com.example.BobGourmet=${LOGGING_LEVEL:DEBUG}

# Email Domain Validation
app.email.allowed-domains=${ALLOWED_EMAIL_DOMAINS:gmail.com,naver.com,daum.net,kakao.com,nate.com,hanmail.net,yahoo.com,hotmail.com,outlook.com}

# Google OAuth2 Configuration (uses fake credentials from .env for dev)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI}
spring.security.oauth2.client.registration.google.scope=openid,profile,email